1. Comment -> 
	Single line - # this is comment
	Multi line - ''' This is 
					multiline comment ''' 
					
2. Variable ->
	variableName initialValue e.g. n1 10 / st1 "bangladesh"
	multiple variable - n1, n2, st1 =  2, 5, "This is good thing" 
	
3. if-else ->

	age = 15
	if age < 13:
	    print("He is a kid !")
	    print("He is " + str(age) + " years old!")
	# else if
	elif age < 18:
	    print("He is immature")
	    print("He is " + str(age) + " years old!")
	else:
	    print("He is adult!")
	    print("He is " + str(age) + " years old!")
	
4. Loop ->
	#	while -
		while n<=10:
	#	print("The number now is " + str(n) )
		if( n%2 == 0 ):
			print("Ever number is : " + str(n) )
		n+=1
	print("Loop Ends Here!")

	#	for-
	for a_i in range(8): # a_i = 0 to 7
	    print(a_i) # prints 0 to 7

	for a_i in range(0, 101, 5): # a_i=0;a_i<101;a_i+=5
	    print(a_i)

	#	Over list -
	SAARC = ["Bangla", "India", "Nepal", "Bhutan", "Sri Lanka"]

	for country in SAARC:
	    print(country, " is in SAARC.")


5. String ->

	length - len(st)

	remove space from before and after - st2 = st.strip()

	remove space from before - st2 = st.lstrip() # left strip
	remove space from after - st2 = st.rstrip()  # right strip


	replace some substring with another substring - 
	st2 = st.replace( 'Ba', 'b' ) # name.replace(whatToReplace, ByWhich)

	upper/lower - st2 = st.upper()/st.lower()

	swap - st1, st2 = st2, st1 

	# changing element of string by index is not allowed.

	# finding substring -
	country = "Bangladesh"
	country.find("Ban") # returns first character's index. and -1 when not found

	# seperate words by spaces -
	>>> str = "I   am  a programmer."
	>>> words = str.split()
	>>> print(words)
	['I', 'am', 'a', 'programmer.'] # list.

	# count substring -
	>>> str = "This is"
	>>> str.count("is")
	2

	# starts with ends with -
	>>> s = "Bangladesh"
	>>> s.startswith("Ban")
	True
	>>> s.startswith("ban")
	False
	>>> s.startswith("an")
	False
	>>> s.endswith("Ban")
	False
	>>> s.endswith("desh")
	True
	>>> s.endswith("h")
	True


6. List ->
	li = ['This', 'is', 'a', "List"]
	# here li[0] = 'This' / li[3] = 'List'
	# here li[-1] = 'List' / li[-4] = 'This'

	li2 = ['This','is', 10000, 12.22222] 

	# a list can contain different types of data

	sublist ->

	li2[1:3] = ['is', 10000] / li2[-3:-1]
	# name[startingIndex:lastIndex+1]

	# is in the list or not
	list1 = [11, "Bangladesh", 22.22]

	isPresent = "Banglades" in list1
	print(isPresent) # false
	isPresent = "Bangladesh" in list1
	print(isPresent) # true

	# declare with range -
	li = list(range(1, 11, 1)) # li has 1 to 10

	# add element at back/ push back -
	saarc = ["Bangladesh", "India", 'Nepal']

	saarc.append('Bhutan') # 'Bhutan' is added at last

	# sort
	>>> li = [1, 3, 7, 2, 4, 6, 1]
	>>> li.sort()
	>>> print(li)
	[1, 1, 2, 3, 4, 6, 7]

	# reverse
	>>> li = [1, 2, 3, 4]
	>>> li.reverse() # make the list reversed.
	>>> print(li)
	[4, 3, 2, 1]

	# insert
	>>> fruits = ["mango", "banana", "orange"]
	>>> fruits.insert(0, "apple")
	>>> fruits
	['apple', 'mango', 'banana', 'orange']
	>>> fruits.insert(2, "coconut")
	>>> fruits
	['apple', 'mango', 'coconut', 'banana', 'orange']

	# append(works as pushback)
	fruits.append('lichi')

	# remove -
	saarc.remove('Pakistan') # removes first occurance from the list. gives error if not present.

	#pop -
	item = frutes.pop() # removes the last element and returns it.
	# remove by index -
	frutes.pop(2) # removes the element and returns it.

	# delete list -
	del(li) # li no longer exits.

	# delete element by index -
	del(li[2]) # delets the element indexed 2

	# add two list -
	europe.extend(saarc)/ europe = europe + saarc # all elements of saarc will be added at the last of europe.

	# count occurance of an element -
	li.count('apple') # returns how many times apple occurs in li

	# declare empty list -
	 li = [] # li is a list that doesn't have any element initially.

	 # list comprehensions
	li = [1, 2, 3, 4]
	li2 = [2 * x for x in li if x % 2 == 0] # [4, 8]
	li2 = [2 * x for x in li] # [2, 4, 6, 8]

7. Arithmetic ->

	Division (int/float) -

	 n1 = 10/2 # n1 is float type
	 n1 = 10//2 # n1 is int type

	 Power function - 

	 n1 = 10 ** 2 # variable = number ** base

 8. print() ->

	# to print multiple variable in a single print() use comma to separate them.
	n1 = 3
	st = "A string"
	f1 = 10.99
	print(n1, st, " Separator ", f1)

	#print in the same line - 
	for a_i in li:
	    print(a_i, end=' ') # ends with that string 

9. intput ->

	name = input() # a value will be stored in name that is entered from keyboard.
	name = input("What is your name? ") # quoted line will be printed and an input will be taken and stored in name.

	input() takes string as input so need to type casted to desired form.

	#the following code won't give desired value -
	number1 = input("Type an integer and press enter: ")
	number2 = input("Type another integer and press enter: ")
	print("number1 + number2 = ", number1+number2)

	# But this will -
	number1 = input("Type an integer and press enter: ")
	number2 = input("Type another integer and press enter: ")
	number1 = int(number1)
	print("number1 + number2 = ", number1+number2)

	# taking input from a single line -
	arr = [int(x) for x in input().split()] # all the values entered into a single line will be stored in arr 

10. Function ->

	def add(n1, n2):
		return n1 + n2

	# 2 blank line needed before and after a function/class.

	# default value of a parameter -

	# if mufnc() is called without any parameter y will have 10 othewise it will have the value that is passed.
	def myfnc(y=10):
	    print("y = ", y)

	def myFunc(p, y=11, z=12):


	myFunc(y=2, p=10) # assing value by parameter's names.

	# change of function values in function changes the main list.

	def test_fnc(li):
	    li[0] = 10

	my_list = [1, 2, 3, 4]
	print("before function call", my_list)
	test_fnc(my_list)
	print("after function call", my_list)

	output-
	before function call [1, 2, 3, 4]
	after function call [10, 2, 3, 4]

11. set ->
	
	# A builtin data type to represent set.
	# use curly brace to create set.

	A = set() # empty set

	items = {"Pen", "laptop", 22, 22}

	items will only hold one instance of same data

	From list/tuple to set -
		>>> li = [1, 2, 3, 4]
		>>> tpl = (1, 2, 3)
		>>> A = set(li)
		>>> A
		{1, 2, 3, 4}
		>>> B = set(tpl)
		>>> B
		{1, 2, 3}

	Whether a number is a member of a set -
		>>> A = {1, 2, 3}
		>>> 1 in A
		True
		>>> 2 in A
		True
		>>> 5 in A
		False

	Set operations ( &, |, ^, - )

		>>> A = {1, 2, 3, 4, 5}
		>>> B = {2, 4, 6, 8}
		>>> C = A & B
		>>> C
		{2, 4}
		>>> C = A | B
		>>> C
		{1, 2, 3, 4, 5, 6, 8}
		>>> C = A ^ B
		>>> C
		{1, 3, 5, 6, 8}
		>>> C = A - B
		>>> C
		{1, 3, 5}
		>>> C = B - A
		>>> C
		{8, 6}


12. Dictionary ->

	Basic -
		>>> marks = {1: 77, 2: 76, 5: 62, 4: 78, 3: 65}
		>>> type(marks)
		<class 'dict'>
		>>> marks[3]
		65
		>>> dt = {}
		>>> dt
		{}
		>>> print(dt)
		{}
		>>> type(dt)
		<class 'dict'>
		>>> dt[1] = "one"
		>>> print(dt)
		{1: 'one'}
		>>> dt[2] = "two"
		>>> print(dt)
		{1: 'one', 2: 'two'}